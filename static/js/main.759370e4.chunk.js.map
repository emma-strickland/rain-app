{"version":3,"sources":["config.js","App.js","reportWebVitals.js","index.js"],"names":["config","API_BASE_URL","rainAudio","Audio","App","useState","zipCode","setZipCode","response","setResponse","loading","setIsLoading","useEffect","isRainingToday","play","pause","length","fetch","then","res","json","result","catch","error","console","log","className","type","placeholder","onChange","e","target","value","hidden","message","city","state","Date","toDateString","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+LAUeA,G,MAVF,CACTC,aAAc,uC,uBCIZC,EAAY,IAAIC,MAAM,cA2EbC,MAzEf,WACE,MAA8BC,mBAAS,IAAvC,mBAAOC,EAAP,KAAgBC,EAAhB,KACA,EAAgCF,qBAAhC,mBAAOG,EAAP,KAAiBC,EAAjB,KACA,EAAgCJ,oBAAS,GAAzC,mBAAOK,EAAP,KAAgBC,EAAhB,KA0BA,OAxBAC,qBAAU,WACHJ,IACDA,EAASK,eACXX,EAAUY,OAEVZ,EAAUa,WAEX,CAACP,IAEJI,qBAAU,WACJN,GAA8B,IAAnBA,EAAQU,SACrBL,GAAa,GACbM,MAAM,GAAD,OAAIjB,EAAOC,aAAX,yBAAwCK,IAC1CY,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GACJV,GAAa,GACbF,EAAYY,MACXC,OAAM,SAAAC,GACPZ,GAAa,GACba,QAAQC,IAAI,UAAWF,SAG5B,CAACjB,IAGF,qBAAKoB,UAAU,MAAf,SACE,iCACE,qBAAKA,UAAU,aAAf,SACE,uBACEC,KAAK,OACLD,UAAU,aACVE,YAAY,iBACZC,SAAU,SAAAC,GAAC,OAAIvB,EAAWuB,EAAEC,OAAOC,QACnCA,MAAO1B,MAGX,qBAAKoB,UAAU,UAAf,SACE,cAAC,IAAD,CAAcC,KAAK,OAAOM,QAASvB,OAEnCA,GAAWF,GACX,8BACGA,EAASe,MACN,qBAAKG,UAAU,gBAAf,SAAgClB,EAASe,MAAMW,UAE/C,gCACE,sBAAKR,UAAU,eAAf,UACE,sBAAKA,UAAU,WAAf,UAA2BlB,EAAS2B,KAApC,KAA4C3B,EAAS4B,SACrD,qBAAKV,UAAU,OAAf,UAAuB,IAAIW,MAAOC,oBAEpC,qBAAKZ,UAAU,kBAAf,SACE,qBAAKA,UAAU,QAAf,UAEgC,IAA5BlB,EAASK,eACL,qBAAKa,UAAU,aAAf,sCACA,qBAAKA,UAAU,aAAf,0DCtDba,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBvB,MAAK,YAAkD,IAA/CwB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.759370e4.chunk.js","sourcesContent":["const PROD = {\n    API_BASE_URL: 'https://rain-app-api.herokuapp.com'\n};\n\nconst DEV = {\n    API_BASE_URL: 'http://localhost:4000'\n};\n\nconst config = process.env.NODE_ENV === 'development' ? DEV : PROD;\n\nexport default config;","import './App.css';\nimport React, { useState, useEffect } from 'react';\nimport config from './config';\nimport ReactLoading from 'react-loading';\n\nconst rainAudio = new Audio(\"./rain.mp3\");\n\nfunction App() {\n  const [zipCode, setZipCode] = useState('');\n  const [response, setResponse] = useState();\n  const [loading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    if (!response) return;\n    if (response.isRainingToday) {\n      rainAudio.play();\n    } else {\n      rainAudio.pause();\n    }\n  }, [response]);\n\n  useEffect(() => {\n    if (zipCode && zipCode.length === 5) {\n      setIsLoading(true);\n      fetch(`${config.API_BASE_URL}/rainData?zip=${zipCode}`)\n        .then(res => res.json())\n        .then(result => {\n          setIsLoading(false);\n          setResponse(result);\n        }).catch(error => {\n          setIsLoading(false);\n          console.log('error: ', error);\n        });\n    }\n  }, [zipCode])\n\n  return (\n    <div className=\"App\">\n      <main>\n        <div className=\"search-box\">\n          <input\n            type=\"text\"\n            className=\"search-bar\"\n            placeholder=\"Enter zip code\"\n            onChange={e => setZipCode(e.target.value)}\n            value={zipCode}\n          />\n        </div>\n        <div className=\"spinner\">\n          <ReactLoading type=\"spin\" hidden={!loading} />\n        </div>\n        {!loading && response &&\n          <div>\n            {response.error\n              ? <div className=\"error-message\">{response.error.message}</div>\n              : (\n                <div>\n                  <div className=\"location-box\">\n                    <div className=\"location\">{response.city}, {response.state}</div>\n                    <div className=\"date\">{new Date().toDateString()}</div>\n                  </div>\n                  <div className=\"rains-container\">\n                    <div className=\"rains\">\n                      {\n                        response.isRainingToday === true\n                          ? <div className=\"rains-text\">Yes, it will rain today!</div>\n                          : <div className=\"rains-text\">No, it will not rain today :(</div>\n                      }\n                    </div>\n                  </div>\n                </div>\n              )\n            }\n          </div>\n        }\n      </main>\n    </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}